apply plugin: 'maven'
apply plugin: 'java'
apply plugin: 'eclipse'

group = 'htm.java'
version = '0.40'

sourceCompatibility = 1.8
targetCompatibility = 1.8

jar {
    manifest {
        attributes 'Implementation-Title': 'htm.java', 'Implementation-Version': 0.40
    }
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'maven central' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
}

dependencies {
    compile group: 'joda-time', name: 'joda-time', version: '2.5'
    compile(group: 'com.chaschev', name: 'chutils', version:'1.4') {
        exclude(module: 'mockito-all')
        exclude(module: 'slf4j-api')
        exclude(module: 'guava')
        exclude(module: 'jsr305')
        exclude(module: 'commons-io')
    }
    compile group: 'net.sf.trove4j', name: 'trove4j', version:'3.0.3'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version:'2.4.4'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version:'2.4.4'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version:'2.4.4'
    compile group: 'org.slf4j', name: 'slf4j-api', version:'1.7.10'
    testCompile group: 'junit', name: 'junit', version:'4.11'
    testCompile group: 'ch.qos.logback', name: 'logback-classic', version:'1.1.2'
}

/////////////////////////////////////////////////////////////////
//                   jmh Benchmarking Tool                     //
/////////////////////////////////////////////////////////////////
buildscript {
   repositories {
      jcenter()
      mavenCentral()
      maven {
          name 'Shadow'
          url 'http://dl.bintray.com/content/johnrengelman/gradle-plugins'
      }
      
   }
   
   dependencies {
      classpath 'me.champeau.gradle:jmh-gradle-plugin:0.1.3'
      classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.0'
      classpath 'org.openjdk.jmh:jmh-generator-annprocess:1.5.2'
   }
}

apply plugin: 'me.champeau.gradle.jmh'
apply plugin: 'com.github.johnrengelman.shadow'

jmh {
    resultFormat = 'CSV'
    fork = 1
    warmupIterations = 5 // Number of warm up iterations to do.
    iterations = 5       // Number of measurement iterations to do.
}

task runBench(dependsOn: ['parent.compile', 'test']) << {
    if(!project.hasProperty('skipbench')) {
        tasks.compileJmhJava.execute()
        tasks.processJmhResources.execute()
        tasks.jmhJar.execute()
        tasks.jmh.execute()
    }
}

check.doLast {
    tasks.runBench.execute()
}
/////////////////// END jmh /////////////////////

// create Gradle wrapper with command line `gradle wrapper` in terminal
task wrapper(type: Wrapper) {
    gradleVersion = '2.2'
}
